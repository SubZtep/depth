var F=Object.defineProperty;var u=Object.getOwnPropertySymbols;var L=Object.prototype.hasOwnProperty,C=Object.prototype.propertyIsEnumerable;var a=(d,Z,b)=>Z in d?F(d,Z,{enumerable:!0,configurable:!0,writable:!0,value:b}):d[Z]=b,Y=(d,Z)=>{for(var b in Z||(Z={}))L.call(Z,b)&&a(d,b,Z[b]);if(u)for(var b of u(Z))C.call(Z,b)&&a(d,b,Z[b]);return d};import{M as Mesh,B as BoxGeometry,a as MeshPhongMaterial,s,r,$,o,_ as __decorate,e,b as __metadata,l,t,c as e$1,n,v as v4,W as WebGLRenderer,d as sRGBEncoding,P as PCFSoftShadowMap,f as PerspectiveCamera,S as Scene,C as Color,g as Clock,y,h as n$1,i as n$2}from"./vendor.30a77ea0.js";const p=function(){const Z=document.createElement("link").relList;if(Z&&Z.supports&&Z.supports("modulepreload"))return;for(const W of document.querySelectorAll('link[rel="modulepreload"]'))G(W);new MutationObserver(W=>{for(const X of W)if(X.type==="childList")for(const c of X.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&G(c)}).observe(document,{childList:!0,subtree:!0});function b(W){const X={};return W.integrity&&(X.integrity=W.integrity),W.referrerpolicy&&(X.referrerPolicy=W.referrerpolicy),W.crossorigin==="use-credentials"?X.credentials="include":W.crossorigin==="anonymous"?X.credentials="omit":X.credentials="same-origin",X}function G(W){if(W.ep)return;W.ep=!0;const X=b(W);fetch(W.href,X)}};p();function basicCube({detail:{exec3D:d,loop3D:Z}}){d(({scene:b})=>{const G=new Mesh(new BoxGeometry,new MeshPhongMaterial({color:6723859,wireframe:!0}));G.position.setZ(-2),b.add(G)}),Z(({camera:b,deltaTime:G})=>{b.rotation.z+=100*(Math.PI/180)*G})}var m;let DGazeClick=(m=class extends s{constructor(){super(...arguments);this.delay=3e3,this.timer=null}start(){this.timer=setTimeout(()=>{var Z;this.timer=null,(Z=this.els)==null||Z[0].click()},3e3)}stop(){this.timer&&(clearTimeout(this.timer),this.timer=null)}disconnectedCallback(){super.disconnectedCallback(),this.timer&&clearTimeout(this.timer)}render(){return $`
      <div
        class=${o({waiting:!!this.timer})}
        @mouseenter=${this.start}
        @mouseleave=${this.stop}
        @click=${this.stop}
      >
        <slot></slot>
      </div>
    `}},(()=>{m.styles=r`
    :host > div {
      user-select: none;
      display: inline-block;
      transition: transform 2s linear 1s;
      line-height: 0;
    }
    :host > div:not(.waiting) {
      transition: none;
    }
    .waiting {
      transform: rotate(360deg);
    }
  `})(),m);__decorate([e({type:Number}),__metadata("design:type",Object)],DGazeClick.prototype,"delay",void 0);__decorate([l(),__metadata("design:type",Array)],DGazeClick.prototype,"els",void 0);__decorate([t(),__metadata("design:type",Object)],DGazeClick.prototype,"timer",void 0);__decorate([e$1({passive:!0}),__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",void 0)],DGazeClick.prototype,"start",null);__decorate([e$1({passive:!0}),__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",void 0)],DGazeClick.prototype,"stop",null);DGazeClick=__decorate([n("d-gaze-click")],DGazeClick);class Store{constructor(Z){this.callbacks=new Set,this.patching=!1,this.state=Z,this.state=new Proxy(this.state,{set:(b,G,W)=>{if(b[G]===W)return!0;const X=this.patching?b:Y({},b);return Reflect.set(b,G,W)?(this.patching||this.processCallbacks(b,X),!0):!1}});for(const b in Z)Reflect.defineProperty(this,b,{set:G=>{this.state[b]=G},get:()=>this.state[b]})}processCallbacks(Z,b){for(const G of this.callbacks)G(Z,b)}subscribe(Z){return this.callbacks.add(Z),()=>{this.callbacks.delete(Z)}}toString(){return JSON.stringify(this.state)}patch(Z){const b=Y({},this.state);this.patching=!0,Object.assign(this.state,Z),this.processCallbacks(this.state,b),this.patching=!1}}globalThis.statem=new Map;function stateMake(d,Z=v4()){let b;return globalThis.statem.has(Z)?b=globalThis.statem.get(Z):(b=new Store(d),globalThis.statem.set(Z,b)),b}class Singleton{constructor(){if(Singleton.instance)throw new Error("use Singleton.getInstance()");this.map=new Map}static getInstance(){return Singleton.instance=Singleton.instance||new Singleton,Singleton.instance}}const singleton=Singleton.getInstance().map;Object.freeze(singleton);function debounce(d,Z=100){let b;return function(...G){clearTimeout(b),b=setTimeout(()=>d(...G),Z)}}function deEvilizer(d){return d.replaceAll("eval","evil")}function createRenderer(d){const Z=new WebGLRenderer({canvas:d,antialias:!0,powerPreference:"high-performance",logarithmicDepthBuffer:!0});return Z.physicallyCorrectLights=!0,Z.outputEncoding=sRGBEncoding,Z.shadowMap.enabled=!0,Z.shadowMap.type=PCFSoftShadowMap,Z}function createCamera({width:d,height:Z}){return new PerspectiveCamera(90,d/Z,1,2e3)}function createScene(){const d=new Scene;return d.background=new Color(6710784),d}function init({canvas,injectedFunctions,statem}){let oldWidth=0,oldHeight=0;const renderer=createRenderer(canvas),camera=createCamera(statem),scene=createScene(),clock=new Clock;function canvasResizer(){statem.width===oldWidth||statem.height===oldHeight||(oldWidth=statem.width,oldHeight=statem.height,camera.aspect=statem.width/statem.height,camera.updateProjectionMatrix(),renderer.setSize(statem.width,statem.height,!1))}canvasResizer();function clearContext(){injectedFunctions.singleFns.length=0,injectedFunctions.loopFns.length=0,scene.clear(),renderer.clear()}let fpsInterval,prenow=performance.now(),elapsed,now,deltaTime=0;async function render(time){if(statem.running){const fps=statem.fps;if(renderer.render(scene,camera),requestAnimationFrame(render),deltaTime+=clock.getDelta(),fps!==Number.POSITIVE_INFINITY&&(now=performance.now(),elapsed=now-prenow,fpsInterval=1e3/fps),fps===Number.POSITIVE_INFINITY||elapsed>fpsInterval){fps!==Number.POSITIVE_INFINITY&&(prenow=now-elapsed%fpsInterval);const props={scene,renderer,clock,deltaTime,time,camera};deltaTime=0;const evil=statem.offscreen?fn=>void eval(";("+fn+")(props);"):null;await Promise.all([...injectedFunctions.singleFns.map(d=>evil?evil(d):d(props)),...injectedFunctions.loopFns.map(d=>evil?evil(d):d(props))]),injectedFunctions.singleFns.length=0}canvasResizer()}else return clearContext()}requestAnimationFrame(render)}const encodedJs="",blob=typeof window<"u"&&window.Blob&&new Blob([atob(encodedJs)],{type:"text/javascript;charset=utf-8"});function WorkerWrapper(){const d=blob&&(window.URL||window.webkitURL).createObjectURL(blob);try{return d?new Worker(d,{}):new Worker("data:application/javascript;base64,"+encodedJs,{type:"module"})}finally{d&&(window.URL||window.webkitURL).revokeObjectURL(d)}}function startWorker({canvas:d,injectedFunctions:Z,statem:b,worker:G}){const W=d.transferControlToOffscreen(),X={type:"init",canvas:W,injectedFunctions:Z},c=J=>{G.postMessage({type:"updateStatem",statem:J})};return c(b.toString()),G.postMessage(X,[W]),c}function startMainPage({canvas:d,injectedFunctions:Z,statem:b}){init({type:"init",canvas:d,injectedFunctions:Z,statem:b})}function startLooping({canvas:d,statem:Z}){Z.offscreen="transferControlToOffscreen"in d&&Z.offscreen;const b={singleFns:[],loopFns:[]};let G,W;if(Z.offscreen){G=new WorkerWrapper,W=startWorker({canvas:d,injectedFunctions:b,statem:Z,worker:G});const X=Z.subscribe(c=>{if(!c.running){X(),G.terminate();return}W(JSON.stringify(c))})}else startMainPage({canvas:d,injectedFunctions:b,statem:Z});return{exec3D:X=>Z.offscreen?G==null?void 0:G.postMessage({type:"exec3D",fn:deEvilizer(X.toString())}):b.singleFns.push(X),loop3D:X=>Z.offscreen?G==null?void 0:G.postMessage({type:"loop3D",fn:deEvilizer(X.toString())}):b.loopFns.push(X)}}const play=$`
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" role="img" aria-label="Play">
    ${y`<path d="M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z"/>`}
  </svg>
`,stop=$`
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" role="img" aria-label="Stop">
    ${y`<path d="M384 128v255.1c0 35.35-28.65 64-64 64H64c-35.35 0-64-28.65-64-64V128c0-35.35 28.65-64 64-64H320C355.3 64 384 92.65 384 128z"/>`}
  </svg>
`,hamburger=$`
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" role="img" aria-label="Menu">
    ${y`<path d="M416 128H32C14.33 128 0 113.7 0 96C0 78.33 14.33 64 32 64H416C433.7 64 448 78.33 448 96C448 113.7 433.7 128 416 128zM416 448H32C14.33 448 0 433.7 0 416C0 398.3 14.33 384 32 384H416C433.7 384 448 398.3 448 416C448 433.7 433.7 448 416 448z"/><path d="M0 256C0 238.3 14.33 224 32 224H416C433.7 224 448 238.3 448 256C448 273.7 433.7 288 416 288H32C14.33 288 0 273.7 0 256z"/>`}
  </svg>
`;var icon=Object.freeze(Object.defineProperty({__proto__:null,play,stop,hamburger},Symbol.toStringTag,{value:"Module"})),V;let DIcon=(V=class extends s{render(){return icon[this.name]}},(()=>{V.styles=r`
    :host svg {
      height: 1rem;
      fill: currentColor;
    }
    :host svg path:nth-of-type(2) {
      opacity: 0.4;
    }
  `})(),V);__decorate([e(),__metadata("design:type",Object)],DIcon.prototype,"name",void 0);DIcon=__decorate([n("d-icon")],DIcon);var R;let DToolbar=(R=class extends s{constructor(){super(...arguments);this.shifted=!1}render(){return $`
      <div class="toolbar ${o({shifted:this.shifted})}">${n$1(this.shifted,()=>$`<slot></slot>`)}</div>
      <d-gaze-click>
        <button @click=${this.toggleShifted}>
          <d-icon name="hamburger"></d-icon>
        </button>
      </d-gaze-click>
    `}toggleShifted(){this.shifted=!this.shifted}},(()=>{R.styles=r`
    .toolbar {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      transform: translateX(-100%);
      transition: transform 250ms ease-out;
      padding: 2px 0;
      width: 100%;
      gap: 4px;
      accent-color: #8a0303;
    }
    .toolbar:first-child {
      margin-left: 30px;
    }
    .shifted {
      background-image: radial-gradient(circle at center, #05675233 0%, #6669 30%, transparent 90%);
      transform: translateX(0);
    }
    d-gaze-click {
      position: absolute;
      top: 8px;
      left: 4px;
    }
    d-gaze-click > button {
      background: transparent;
      cursor: pointer;
      border: none;
    }
    ::slotted(label) {
      color: #fff;
      user-select: none;
      cursor: pointer;
      white-space: nowrap;
    }
    ::slotted(button) {
      color: #111;
      cursor: pointer;
      line-height: 0;
      padding: 2px 10px;
      border: 2px outset #bababa;
      border-radius: 6px;
      background-color: #aa9;
      transition: all 0.1s;
    }
    ::slotted(*:hover) {
      outline: solid 1px #ffa6;
    }
    ::slotted(button:active) {
      border-style: inset;
    }
    ::slotted(button:active) {
      /* TODO: apply to #shadow-root content */
      transform: translate(2px, 2px);
    }
    ::slotted(button:disabled) {
      cursor: not-allowed;
      border-style: groove;
      background: #669;
      opacity: 0.6;
      color: #ccc;
    }
  `})(),R);__decorate([e({type:Boolean}),__metadata("design:type",Object)],DToolbar.prototype,"shifted",void 0);DToolbar=__decorate([n("d-toolbar")],DToolbar);const resize=new ResizeObserver(debounce(d=>{for(const Z of d)Z.target.resizeCallback(Z)}));var h;let DCanvas=(h=class extends s{constructor(){super(...arguments);this.autoplay=!1,this.offscreen=!1,this.sid=v4(),this.startStop=Z=>{if(Z){const b=startLooping({canvas:Z,statem:this.statem});this.dispatchEvent(new CustomEvent("start",{bubbles:!1,cancelable:!1,composed:!0,detail:b}))}else this.statem.running=!1}}resizeCallback({contentBoxSize:[{blockSize:Z,inlineSize:b}]}){this.statem.patch({width:b,height:Z})}connectedCallback(){super.connectedCallback(),this.statem=stateMake({running:this.autoplay,offscreen:this.offscreen,fps:Number.POSITIVE_INFINITY,width:this.clientWidth,height:this.clientHeight},this.sid),this.statem.subscribe(Z=>{this.requestUpdate("state",Z)}),resize.observe(this)}disconnectedCallback(){resize.unobserve(this),super.disconnectedCallback()}render(){return $`
      <d-toolbar ?shifted=${!this.autoplay}>
        <button @click=${this.startRunning} ?disabled=${this.statem.running}>
          <d-icon name="play"></d-icon>
        </button>
        <button @click=${this.stopRunning} ?disabled=${!this.statem.running}>
          <d-icon name="stop"></d-icon>
        </button>
        <label>
          Offscreen
          <input
            type="checkbox"
            .checked=${this.statem.offscreen}
            ?disabled=${this.statem.running}
            @change=${this.updateOffscreen}
          />
        </label>
        <label>
          FPS ${this.statem.fps===Number.POSITIVE_INFINITY?"\u221E":this.statem.fps}
          <input
            type="range"
            min="0"
            max="61"
            value=${this.statem.fps===Number.POSITIVE_INFINITY?61:this.statem.fps}
            @input=${this.updateFps}
          />
        </label>
      </d-toolbar>
      ${n$1(this.statem.running,()=>$`<canvas ${n$2(this.startStop)}></canvas>`)}
    `}startRunning(){this.statem.running=!0}stopRunning(){this.statem.running=!1}updateOffscreen({target:{checked:Z}}){this.statem.offscreen=Z}updateFps({srcElement:{valueAsNumber:Z}}){this.statem.fps=Z===61?Number.POSITIVE_INFINITY:Z}},(()=>{h.styles=r`
    * {
      font: 1rem "Trebuchet MS", Helvetica;
      letter-spacing: 1px;
    }
    :host {
      display: block;
      position: relative;
      writing-mode: vertical-tb; /* for ResizeObserverSize */
      background: repeating-conic-gradient(from 0deg, transparent 0deg 90deg, #fff3 90deg 180deg) 50% 50%/2rem 2rem;
      transition: background 100ms linear;
      min-width: 6rem;
      min-height: 6rem;
      overflow: hidden;
      resize: both;
    }
    :host(:hover) {
      background-size: 1.945rem 1.945rem;
    }
    :host(canvas) {
      width: inherit;
      height: inherit;
    }
    d-toolbar {
      position: absolute;
    }
  `})(),h);__decorate([e({type:Boolean}),__metadata("design:type",Object)],DCanvas.prototype,"autoplay",void 0);__decorate([e({type:Boolean}),__metadata("design:type",Object)],DCanvas.prototype,"offscreen",void 0);__decorate([e({type:String}),__metadata("design:type",Object)],DCanvas.prototype,"sid",void 0);DCanvas=__decorate([n("d-canvas")],DCanvas);var main="";const numberOfCubes=13;globalThis.mc=d=>{var b;const Z=document.createElement("d-canvas");return Z.classList.add("paused"),Z.setAttribute("sid",d),Z.setAttribute("offscreen","true"),Z.setAttribute("autoplay","true"),(b=document.querySelector(".holes"))==null||b.append(Z),setTimeout(()=>Z.classList.add("zoom"),1e3),Z};const canvases=Array.from({length:numberOfCubes},()=>globalThis.mc("666"));var N;(N=document.querySelector(".holes"))==null||N.append(...canvases);for(const d of document.querySelectorAll("d-canvas"))d.addEventListener("start",basicCube);
